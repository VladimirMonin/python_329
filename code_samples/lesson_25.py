"""
lesson 25
15.10.2023

1. Повторили lesson_24.py
2. Метод __new__ - это метод, который вызывается при создании экземпляра класса.
Посмотрели что именно он создает экземпляр класса
"""

"""
super() в Python используется для вызова методов родительского класса. 
Это особенно полезно в системе с множественным наследованием, где есть несколько родительских классов, 
и нам нужно правильно определить порядок вызова методов.

Применительно к вашему коду и методу __new__, вызов super().__new__(cls) обеспечивает вызов метода __new__ 
из непосредственного родительского класса (обычно это базовый класс object для большинства классов в Python).

Под капотом super() делает следующее:

    Он просматривает MRO (Method Resolution Order) текущего класса. MRO - это порядок, в котором интерпретатор 
    Python ищет методы.
    Затем super() возвращает следующий класс в этом порядке.

Теперь, когда вы переопределяете метод в производном классе (например, __new__ в вашем классе Matri),
 и вам нужно также вызвать реализацию этого метода из родительского класса, вы используете super().

Таким образом, в контексте вашего кода:

    Когда вы создаете экземпляр класса Matri, сначала вызывается метод __new__.
    Внутри вашего переопределенного метода __new__ вы вызываете super().__new__(cls), чтобы обеспечить корректное 
    создание экземпляра объекта с использованием реализации метода __new__ из родительского класса.
    После того как экземпляр успешно создан, вызывается метод __init__ для инициализации его атрибутов.

В целом, super() является мощным инструментом, который позволяет избежать проблем, связанных с множественным 
наследованием, и обеспечивает более ясное и читаемое поведение при наследовании и переопределении методов.

"""



class NestedDoll:
    """
    Класс, который описывает матрешку
    """
    def __init__(self, color: str, size: int, material: str) -> None:
        self.color = color
        self.size = size
        self.material = material

    def __new__(cls, *args, **kwargs):
        """
        Метод, который вызывается при создании экземпляра класса (автоматически, скрыто)
        :param args:
        :param kwargs:
        :return:
        """
        print(f"Вызвался метод __new__ для класса {cls.__name__}")
        return super().__new__(cls)

    def __str__(self):
        """
        Метод, который вызывается при принте экземпляра класса
        :return:
        """
        return f"Матрешка цвета {self.color} размером {self.size} материал: {self.material}"


# Создание экземпляра класса и проверка в каком порядке будут вызываться методы __new__ и __init__
print('Создание экземпляра класса')
doll1: NestedDoll = NestedDoll("Красный", 10, "Дерево")
