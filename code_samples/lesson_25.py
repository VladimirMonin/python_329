"""
lesson 25
15.10.2023

1. Повторили lesson_24.py
2. Метод __new__ - это метод, который вызывается при создании экземпляра класса.
Посмотрели что именно он создает экземпляр класса
"""

"""
class NestedDoll: — создание нового класса с именем "NestedDoll".
CNT = 0 — это классовый атрибут, который будет отслеживать количество созданных объектов (матрешек).
def __init__(self, color: str): — это конструктор класса. Каждый раз, когда создается новый объект класса, 
этот метод будет автоматически вызываться.
self.color = color — это присваивание значений атрибутам объекта.
 В этой строке задается цвет матрешки.
self.__class__.CNT += 1 — увеличение классового атрибута CNT на единицу при создании каждого нового объекта.
self.nested_doll_id = self.__class__.CNT — присваивание идентификатора матрешке на основе текущего значения CNT.
def check_nested_doll_cnt(): — это метод для проверки общего количества созданных матрешек. Этот метод не принимает
 self в качестве аргумента, что означает, что он должен быть либо статическим методом, либо методом класса.


В Python, __class__ — это специальный атрибут, который позволяет обращаться к классу экземпляра объекта. 
Когда вы используете этот атрибут внутри метода экземпляра, он ссылается на класс этого экземпляра.


"""


class NestedDoll:
    CNT = 0

    def __init__(self, color: str):
        self.color = color
        self.__class__.CNT += 1
        self.nested_doll_id = self.__class__.CNT

    @staticmethod
    def check_nested_doll_cnt():
        if __class__.CNT == 0:
            print("Ни одна матрешка не была создана")
        else:
            print(f"Было создано {__class__.CNT} матрешек")

    def get_id(self):
        return (f'ID матрешки: {self.nested_doll_id}.'
                f'Выполнено по чертежу: {self.__class__.__name__}')


# Создание экземпляра класса и проверка в каком порядке будут вызываться методы __new__ и __init__
print('Создание экземпляра класса')
doll1: NestedDoll = NestedDoll("Красный")
doll2: NestedDoll = NestedDoll("Зеленый")
doll3: NestedDoll = NestedDoll("Синий")

doll3.check_nested_doll_cnt()

print(doll1.get_id())
print(doll2.get_id())
print(doll3.get_id())
